#!/usr/bin/python3

import random
import string
import argparse

help_command = """usage: xkcdpwgen [-h] [-w WORDS] [-c CAPS] [-n NUMBERS] [-s SYMBOLS]
                
Generate a secure, memorable password using the XKCD method
                
optional arguments:
    -h, --help            show this help message and exit
    -w WORDS, --words WORDS
                          include WORDS words in the password (default=4)
    -c CAPS, --caps CAPS  capitalize the first letter of CAPS random words
                          (default=0)
    -n NUMBERS, --numbers NUMBERS
                          insert NUMBERS random numbers in the password
                          (default=0)
    -s SYMBOLS, --symbols SYMBOLS
                          insert SYMBOLS random symbols in the password
                          (default=0)"""

def setUp(w, c, n, s):
    # read file length + lines
    with open("words.txt", "r") as file:
        lines = [line.strip() for line in file.readlines()]
        file_length = len(lines)

    # get correct # of words
    list = []
    for i in range(w):
        list.append(lines[random.randint(0, file_length - 1)]);

    # capitilizes the specified amount
    cap_indicies = random.sample(range(len(list)), c)
    for i in range(len(list)):
        if i in cap_indicies:
            list[i] = list[i].capitalize();

    # random nums the specified amount
    num_indicies = random.sample(range(len(list) + 1), n)
    for i in range(len(list) + 1):
        if i in num_indicies:
            if i < len(list):
                list[i] = str(random.randint(0, 9)) + list[i]
            else:
                list[len(list) - 1] += str(random.randint(0, 9))

    # random symbols the specified amount
    symbols_indicies = random.sample(range(len(list) + 1), s)
    symbols = string.punctuation
    for i in range(len(list) + 1):
        if i in symbols_indicies:
            if i < len(list):
                list[i] = symbols[random.randint(0, len(symbols) - 1)] + list[i]
            else:
                list[len(list) - 1] += symbols[random.randint(0, len(symbols) - 1)]

    # combine words
    combo = ""
    for i in range(len(list)):
        combo += list[i]

    return combo


def main():
    parser = argparse.ArgumentParser(description='Create a strong password', add_help=False)
    parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS, help=help_command)
    parser.add_argument('-w', '--words', type=int, help="include WORDS words in the password (default=4)")
    parser.add_argument('-c', '--caps', type=int, help="capitalize the first letter of CAPS random words (default=0)")
    parser.add_argument('-n', '--numbers', type=int, help="insert NUMBERS random numbers in the password (default=0)")
    parser.add_argument('-s', '--symbols', type=int, help="insert SYMBOLS random symbols in the password (default=0)")

    args = parser.parse_args()

    if args.words is None:
        words = 4
    else:
        words = args.words

    if args.caps is None:
        cap = 0
    else:
        cap = args.caps

    if args.numbers is None:
        num = 0
    else:
        num = args.numbers

    if args.symbols is None:
        sym = 0
    else:
        sym = args.symbols

    combo = setUp(words, cap, num, sym)
    print(combo)


if __name__ == '__main__':
    main()
